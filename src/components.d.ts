/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MapElementData,
  MapElementDataMap,
  MapElementDetail,
  MapElementDetailMap,
  MapElementDetailType,
} from './interface';

export namespace Components {
  interface RlDetailDialog {
    /**
    * The different categories that each item can display.  Each category has a set of Detailtypes.
    */
    'categories': { label: string, name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The details that will be displayed in this dialog.
    */
    'details'?: MapElementDetailMap;
    /**
    * An array of strings that will be used to create action buttons for the dialog.  When the corresponding button is clicked by the user, MDCDialog will emit an event with the lowercase version of the action. For example the action `Yes` would emit the `MDCDialog:closing` with the property `event.detail.action === 'yes'`.
    */
    'dialogActions': string[];
    /**
    * The title of the dialog window.
    */
    'dialogTitle': string;
    /**
    * Returns the values of all the DetailDialogItems as an array of `MapElementDetails`
    */
    'getDetails': () => Promise<MapElementDetail[]>;
    /**
    * Opens this dialog.
    */
    'open': () => Promise<void>;
  }
  interface RlDetailDialogItem {
    /**
    * An array of all the different categories that can be selected.
    */
    'categoryOptions': { label: string, name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The `MapElementDetail` that this item is displaying the information of.
    */
    'detail'?: MapElementDetail;
    /**
    * Returns a `Promise` that resolves to a `MapElementDetail` object with values set as those of this `DetailDialogItem`.
    */
    'getDetail': () => Promise<MapElementDetail>;
    /**
    * Returns a `Promise` that resolves to whether or not this `DetailDialogItem` is to be removed or not.
    */
    'toRemove': () => Promise<boolean>;
  }
  interface RlMap {
    /**
    * The ID of the currently active element.
    */
    'activeElementId'?: number;
    /**
    * An array of the elements that will be displayed on the Map.
    */
    'elements': MapElementDataMap;
    /**
    * The image displayed on the Map.
    */
    'mapImage'?: string;
    /**
    * The maximum scale factor.
    */
    'maxScale': number;
    /**
    * The minimum scale factor.
    */
    'minScale': number;
  }
  interface RlSelectMenu {
    /**
    * The label displayed on the select.
    */
    'label': string;
    /**
    * An array of the different options displayed in the select menu.
    */
    'options': { label: string, value: number }[];
    /**
    * The index of the currently selected option or undefined if nothing selected.
    */
    'selectedOption'?: number;
  }
  interface RlTextField {
    /**
    * A flag indicating if the text field is disabled and does not allow user input.
    */
    'disabled': boolean;
    /**
    * A flag indicating if the text field uses the full-width style.
    */
    'fullwidth': boolean;
    /**
    * Additional text displayed below the main text field.
    */
    'helperText': string;
    /**
    * An icon displayed within the text field.
    */
    'icon': string;
    /**
    * The location of the icon displayed within the text field.
    */
    'iconLocation': 'trailing' | 'leading';
    /**
    * The supplemental label for the text field.
    */
    'label': string;
    /**
    * A flag indicating if the text field has an outlined style.
    */
    'outlined': boolean;
    /**
    * A flag indicating if the text field uses a textarea instead of an input.
    */
    'textarea': boolean;
    /**
    * The current value of the text field input or text area.
    */
    'value': string;
  }
  interface RlTextLog {
    /**
    * Add a new line to the log.
    * @param str A string to write to the log
    */
    'log': (str?: string) => Promise<void>;
  }
}

declare global {


  interface HTMLRlDetailDialogElement extends Components.RlDetailDialog, HTMLStencilElement {}
  var HTMLRlDetailDialogElement: {
    prototype: HTMLRlDetailDialogElement;
    new (): HTMLRlDetailDialogElement;
  };

  interface HTMLRlDetailDialogItemElement extends Components.RlDetailDialogItem, HTMLStencilElement {}
  var HTMLRlDetailDialogItemElement: {
    prototype: HTMLRlDetailDialogItemElement;
    new (): HTMLRlDetailDialogItemElement;
  };

  interface HTMLRlMapElement extends Components.RlMap, HTMLStencilElement {}
  var HTMLRlMapElement: {
    prototype: HTMLRlMapElement;
    new (): HTMLRlMapElement;
  };

  interface HTMLRlSelectMenuElement extends Components.RlSelectMenu, HTMLStencilElement {}
  var HTMLRlSelectMenuElement: {
    prototype: HTMLRlSelectMenuElement;
    new (): HTMLRlSelectMenuElement;
  };

  interface HTMLRlTextFieldElement extends Components.RlTextField, HTMLStencilElement {}
  var HTMLRlTextFieldElement: {
    prototype: HTMLRlTextFieldElement;
    new (): HTMLRlTextFieldElement;
  };

  interface HTMLRlTextLogElement extends Components.RlTextLog, HTMLStencilElement {}
  var HTMLRlTextLogElement: {
    prototype: HTMLRlTextLogElement;
    new (): HTMLRlTextLogElement;
  };
  interface HTMLElementTagNameMap {
    'rl-detail-dialog': HTMLRlDetailDialogElement;
    'rl-detail-dialog-item': HTMLRlDetailDialogItemElement;
    'rl-map': HTMLRlMapElement;
    'rl-select-menu': HTMLRlSelectMenuElement;
    'rl-text-field': HTMLRlTextFieldElement;
    'rl-text-log': HTMLRlTextLogElement;
  }
}

declare namespace LocalJSX {
  interface RlDetailDialog extends JSXBase.HTMLAttributes<HTMLRlDetailDialogElement> {
    /**
    * The different categories that each item can display.  Each category has a set of Detailtypes.
    */
    'categories': { label: string, name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The details that will be displayed in this dialog.
    */
    'details'?: MapElementDetailMap;
    /**
    * An array of strings that will be used to create action buttons for the dialog.  When the corresponding button is clicked by the user, MDCDialog will emit an event with the lowercase version of the action. For example the action `Yes` would emit the `MDCDialog:closing` with the property `event.detail.action === 'yes'`.
    */
    'dialogActions'?: string[];
    /**
    * The title of the dialog window.
    */
    'dialogTitle'?: string;
    /**
    * An event emitted when a new `DetailDialogItem` is added to the dialog.
    */
    'onAddDetail'?: (event: CustomEvent<any>) => void;
  }
  interface RlDetailDialogItem extends JSXBase.HTMLAttributes<HTMLRlDetailDialogItemElement> {
    /**
    * An array of all the different categories that can be selected.
    */
    'categoryOptions': { label: string, name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The `MapElementDetail` that this item is displaying the information of.
    */
    'detail'?: MapElementDetail;
  }
  interface RlMap extends JSXBase.HTMLAttributes<HTMLRlMapElement> {
    /**
    * The ID of the currently active element.
    */
    'activeElementId'?: number;
    /**
    * An array of the elements that will be displayed on the Map.
    */
    'elements': MapElementDataMap;
    /**
    * The image displayed on the Map.
    */
    'mapImage'?: string;
    /**
    * The maximum scale factor.
    */
    'maxScale'?: number;
    /**
    * The minimum scale factor.
    */
    'minScale'?: number;
    /**
    * An event fired when the user deselects the selected `MapElement`.
    */
    'onElementDeselected'?: (event: CustomEvent<any>) => void;
    /**
    * An event fired when the user selects a `MapElement`. The clicked element will be passed as the event parameter.
    */
    'onElementSelected'?: (event: CustomEvent<MapElementData>) => void;
  }
  interface RlSelectMenu extends JSXBase.HTMLAttributes<HTMLRlSelectMenuElement> {
    /**
    * The label displayed on the select.
    */
    'label'?: string;
    /**
    * An event emitted when an item is selected.  The detail of the event is set to the index of the item selected.
    */
    'onSelected'?: (event: CustomEvent<number>) => void;
    /**
    * An array of the different options displayed in the select menu.
    */
    'options'?: { label: string, value: number }[];
    /**
    * The index of the currently selected option or undefined if nothing selected.
    */
    'selectedOption'?: number;
  }
  interface RlTextField extends JSXBase.HTMLAttributes<HTMLRlTextFieldElement> {
    /**
    * A flag indicating if the text field is disabled and does not allow user input.
    */
    'disabled'?: boolean;
    /**
    * A flag indicating if the text field uses the full-width style.
    */
    'fullwidth'?: boolean;
    /**
    * Additional text displayed below the main text field.
    */
    'helperText'?: string;
    /**
    * An icon displayed within the text field.
    */
    'icon'?: string;
    /**
    * The location of the icon displayed within the text field.
    */
    'iconLocation'?: 'trailing' | 'leading';
    /**
    * The supplemental label for the text field.
    */
    'label'?: string;
    /**
    * An event emitted when the value of the input or textarea changes.
    */
    'onChangeValue'?: (event: CustomEvent<any>) => void;
    /**
    * A flag indicating if the text field has an outlined style.
    */
    'outlined'?: boolean;
    /**
    * A flag indicating if the text field uses a textarea instead of an input.
    */
    'textarea'?: boolean;
    /**
    * The current value of the text field input or text area.
    */
    'value'?: string;
  }
  interface RlTextLog extends JSXBase.HTMLAttributes<HTMLRlTextLogElement> {}

  interface IntrinsicElements {
    'rl-detail-dialog': RlDetailDialog;
    'rl-detail-dialog-item': RlDetailDialogItem;
    'rl-map': RlMap;
    'rl-select-menu': RlSelectMenu;
    'rl-text-field': RlTextField;
    'rl-text-log': RlTextLog;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


