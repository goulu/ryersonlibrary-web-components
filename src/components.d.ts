/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  MapElementData,
  MapElementDataMap,
  MapElementDetail,
  MapElementDetailMap,
  MapElementDetailType,
} from './interface';
import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface RlDetailDialogItem {
    /**
    * An array of all the different categories that can be selected.
    */
    'categoryOptions': { name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The currently selected Category.
    */
    'categorySelection'?: { name: string, id: number, items: MapElementDetailType[] };
    /**
    * The `MapElementDetail` that this item is displaying the information of.
    */
    'detail'?: MapElementDetail;
    /**
    * Returns a `Promise` that resolves to a `MapElementDetail` object with values set as those of this `DetailDialogItem`.
    */
    'getDetail': () => Promise<MapElementDetail>;
    /**
    * Returns a `Promise` that resolves to whether or not this `DetailDialogItem` is to be removed or not.
    */
    'toRemove': () => Promise<boolean>;
    /**
    * All the possible values for the type of this `DetailDialogItem`.
    */
    'typeOptions': MapElementDetailType[];
    /**
    * The currently selected type of this `DetailDialogItem`.
    */
    'typeSelection'?: MapElementDetailType;
  }
  interface RlDetailDialogItemAttributes extends StencilHTMLAttributes {
    /**
    * An array of all the different categories that can be selected.
    */
    'categoryOptions': { name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The currently selected Category.
    */
    'categorySelection'?: { name: string, id: number, items: MapElementDetailType[] };
    /**
    * The `MapElementDetail` that this item is displaying the information of.
    */
    'detail'?: MapElementDetail;
    /**
    * All the possible values for the type of this `DetailDialogItem`.
    */
    'typeOptions'?: MapElementDetailType[];
    /**
    * The currently selected type of this `DetailDialogItem`.
    */
    'typeSelection'?: MapElementDetailType;
  }

  interface RlDetailDialog {
    /**
    * The different categories that each item can display.  Each category has a set of Detailtypes.
    */
    'categories': { name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The details that will be displayed in this dialog.
    */
    'details'?: MapElementDetailMap;
    /**
    * An array of strings that will be used to create action buttons for the dialog.  When the corresponding button is clicked by the user, MDCDialog will emit an event with the lowercase version of the action. For example the action `Yes` would emit the `MDCDialog:closing` with the property `event.detail.action === 'yes'`.
    */
    'dialogActions': string[];
    /**
    * The title of the dialog window.
    */
    'dialogTitle': string;
    /**
    * Returns the values of all the DetailDialogItems as an array of `MapElementDetails`
    */
    'getDetails': () => Promise<Promise<any>[]>;
    /**
    * Opens this dialog.
    */
    'open': () => void;
  }
  interface RlDetailDialogAttributes extends StencilHTMLAttributes {
    /**
    * The different categories that each item can display.  Each category has a set of Detailtypes.
    */
    'categories': { name: string, id: number, items: MapElementDetailType[] }[];
    /**
    * The details that will be displayed in this dialog.
    */
    'details'?: MapElementDetailMap;
    /**
    * An array of strings that will be used to create action buttons for the dialog.  When the corresponding button is clicked by the user, MDCDialog will emit an event with the lowercase version of the action. For example the action `Yes` would emit the `MDCDialog:closing` with the property `event.detail.action === 'yes'`.
    */
    'dialogActions'?: string[];
    /**
    * The title of the dialog window.
    */
    'dialogTitle'?: string;
    /**
    * An event emitted when a new `DetailDialogItem` is added to the dialog.
    */
    'onAddDetail'?: (event: CustomEvent) => void;
  }

  interface RlMapEditor {
    /**
    * Add a new `MapPoint` element to the map.  Calling this method starts the process.  The user must then click somewhere on the map to add the point.
    */
    'addPoint': () => void;
    /**
    * Add a new `MapRegion` to the map. Calling this method starts the process. The user must then click numerous times on the map to add points.  Only when clicking again on the original point is the region added.
    */
    'addRegion': () => void;
    /**
    * Cancels the current action and returns the map to its default state, ready for futher action.
    */
    'cancelAction': () => void;
    /**
    * Removes the currently active element.  If no element is selected when this method is called, it has no effect.
    */
    'deleteRegion': () => void;
    /**
    * An array of the elements that will be displayed on the Map.
    */
    'elements': MapElementDataMap;
    /**
    * The image displayed on the Map.
    */
    'mapImage'?: string;
    /**
    * The maximum scale factor.
    */
    'maxScale': number;
    /**
    * The minimum scale factor.
    */
    'minScale': number;
    /**
    * Sets the element with the specified ID to active.
    */
    'setActiveElement': (id: number) => void;
  }
  interface RlMapEditorAttributes extends StencilHTMLAttributes {
    /**
    * An array of the elements that will be displayed on the Map.
    */
    'elements': MapElementDataMap;
    /**
    * The image displayed on the Map.
    */
    'mapImage'?: string;
    /**
    * The maximum scale factor.
    */
    'maxScale'?: number;
    /**
    * The minimum scale factor.
    */
    'minScale'?: number;
    /**
    * An event fired when a new `MapElement` is created. The event details contains the `MapElement` that was created.
    */
    'onElementCreated'?: (event: CustomEvent<MapElementData>) => void;
    /**
    * An event fired when one of the `MapElements` on this map is deleted.
    */
    'onElementDeleted'?: (event: CustomEvent<MapElementData>) => void;
    /**
    * An event fired when the user deselects a `MapElement`.
    */
    'onElementDeselected'?: (event: CustomEvent) => void;
    /**
    * An event fired when one of the `MapElement`s on the map is double clicked.
    */
    'onElementDoubleClicked'?: (event: CustomEvent<MapElementData>) => void;
    /**
    * An event fired when the user selects a MapElement. The clicked element will be passed as the event parameter.
    */
    'onElementSelected'?: (event: CustomEvent<MapElementData>) => void;
    /**
    * An event fired when a `MapElement` is updated (moved or changes shape). The event details contains the `MapElement` that was updated.
    */
    'onElementUpdated'?: (event: CustomEvent<MapElementData>) => void;
  }

  interface RlMap {
    /**
    * Clears the currently active element.
    */
    'clearActiveElement': () => void;
    /**
    * An array of the elements that will be displayed on the Map.
    */
    'elements': MapElementDataMap;
    /**
    * The image displayed on the Map.
    */
    'mapImage'?: string;
    /**
    * The maximum scale factor.
    */
    'maxScale': number;
    /**
    * The minimum scale factor.
    */
    'minScale': number;
    /**
    * Sets the element with the specified ID to active.
    */
    'setActiveElement': (id: number) => void;
  }
  interface RlMapAttributes extends StencilHTMLAttributes {
    /**
    * An array of the elements that will be displayed on the Map.
    */
    'elements': MapElementDataMap;
    /**
    * The image displayed on the Map.
    */
    'mapImage'?: string;
    /**
    * The maximum scale factor.
    */
    'maxScale'?: number;
    /**
    * The minimum scale factor.
    */
    'minScale'?: number;
    /**
    * An event fired when the user deselects the selected `MapElement`.
    */
    'onElementDeselected'?: (event: CustomEvent) => void;
    /**
    * An event fired when the user selects a `MapElement`. The clicked element will be passed as the event parameter.
    */
    'onElementSelected'?: (event: CustomEvent<MapElementData>) => void;
  }

  interface RlSelectMenu {
    /**
    * The label displayed on the select.
    */
    'label': string;
    /**
    * An array of the different options displayed in the select menu.
    */
    'options': string[];
    /**
    * The currently selected option or `undefined` if nothing is selected.
    */
    'selectedOption'?: string;
  }
  interface RlSelectMenuAttributes extends StencilHTMLAttributes {
    /**
    * The label displayed on the select.
    */
    'label'?: string;
    /**
    * An event emitted when an item is selected.  The detail of the event is set to the index of the item selected.
    */
    'onSelected'?: (event: CustomEvent<number>) => void;
    /**
    * An array of the different options displayed in the select menu.
    */
    'options'?: string[];
    /**
    * The currently selected option or `undefined` if nothing is selected.
    */
    'selectedOption'?: string;
  }

  interface RlTextField {
    /**
    * A flag indicating if the text field is disabled and does not allow user input.
    */
    'disabled': boolean;
    /**
    * A flag indicating if the text field uses the full-width style.
    */
    'fullwidth': boolean;
    /**
    * Additional text displayed below the main text field.
    */
    'helperText': string;
    /**
    * An icon displayed within the text field.
    */
    'icon': string;
    /**
    * The location of the icon displayed within the text field.
    */
    'iconLocation': 'trailing' | 'leading';
    /**
    * The supplemental label for the text field.
    */
    'label': string;
    /**
    * A flag indicating if the text field has an outlined style.
    */
    'outlined': boolean;
    /**
    * A flag indicating if the text field uses a textarea instead of an input.
    */
    'textarea': boolean;
    /**
    * The current value of the text field input or text area.
    */
    'value': string;
  }
  interface RlTextFieldAttributes extends StencilHTMLAttributes {
    /**
    * A flag indicating if the text field is disabled and does not allow user input.
    */
    'disabled'?: boolean;
    /**
    * A flag indicating if the text field uses the full-width style.
    */
    'fullwidth'?: boolean;
    /**
    * Additional text displayed below the main text field.
    */
    'helperText'?: string;
    /**
    * An icon displayed within the text field.
    */
    'icon'?: string;
    /**
    * The location of the icon displayed within the text field.
    */
    'iconLocation'?: 'trailing' | 'leading';
    /**
    * The supplemental label for the text field.
    */
    'label'?: string;
    /**
    * An event emitted when the value of the input or textarea changes.
    */
    'onChangeValue'?: (event: CustomEvent) => void;
    /**
    * A flag indicating if the text field has an outlined style.
    */
    'outlined'?: boolean;
    /**
    * A flag indicating if the text field uses a textarea instead of an input.
    */
    'textarea'?: boolean;
    /**
    * The current value of the text field input or text area.
    */
    'value'?: string;
  }

  interface RlTextLog {
    /**
    * Add a new line to the log.
    */
    'log': (str?: string) => void;
  }
  interface RlTextLogAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'RlDetailDialogItem': Components.RlDetailDialogItem;
    'RlDetailDialog': Components.RlDetailDialog;
    'RlMapEditor': Components.RlMapEditor;
    'RlMap': Components.RlMap;
    'RlSelectMenu': Components.RlSelectMenu;
    'RlTextField': Components.RlTextField;
    'RlTextLog': Components.RlTextLog;
  }

  interface StencilIntrinsicElements {
    'rl-detail-dialog-item': Components.RlDetailDialogItemAttributes;
    'rl-detail-dialog': Components.RlDetailDialogAttributes;
    'rl-map-editor': Components.RlMapEditorAttributes;
    'rl-map': Components.RlMapAttributes;
    'rl-select-menu': Components.RlSelectMenuAttributes;
    'rl-text-field': Components.RlTextFieldAttributes;
    'rl-text-log': Components.RlTextLogAttributes;
  }


  interface HTMLRlDetailDialogItemElement extends Components.RlDetailDialogItem, HTMLStencilElement {}
  var HTMLRlDetailDialogItemElement: {
    prototype: HTMLRlDetailDialogItemElement;
    new (): HTMLRlDetailDialogItemElement;
  };

  interface HTMLRlDetailDialogElement extends Components.RlDetailDialog, HTMLStencilElement {}
  var HTMLRlDetailDialogElement: {
    prototype: HTMLRlDetailDialogElement;
    new (): HTMLRlDetailDialogElement;
  };

  interface HTMLRlMapEditorElement extends Components.RlMapEditor, HTMLStencilElement {}
  var HTMLRlMapEditorElement: {
    prototype: HTMLRlMapEditorElement;
    new (): HTMLRlMapEditorElement;
  };

  interface HTMLRlMapElement extends Components.RlMap, HTMLStencilElement {}
  var HTMLRlMapElement: {
    prototype: HTMLRlMapElement;
    new (): HTMLRlMapElement;
  };

  interface HTMLRlSelectMenuElement extends Components.RlSelectMenu, HTMLStencilElement {}
  var HTMLRlSelectMenuElement: {
    prototype: HTMLRlSelectMenuElement;
    new (): HTMLRlSelectMenuElement;
  };

  interface HTMLRlTextFieldElement extends Components.RlTextField, HTMLStencilElement {}
  var HTMLRlTextFieldElement: {
    prototype: HTMLRlTextFieldElement;
    new (): HTMLRlTextFieldElement;
  };

  interface HTMLRlTextLogElement extends Components.RlTextLog, HTMLStencilElement {}
  var HTMLRlTextLogElement: {
    prototype: HTMLRlTextLogElement;
    new (): HTMLRlTextLogElement;
  };

  interface HTMLElementTagNameMap {
    'rl-detail-dialog-item': HTMLRlDetailDialogItemElement
    'rl-detail-dialog': HTMLRlDetailDialogElement
    'rl-map-editor': HTMLRlMapEditorElement
    'rl-map': HTMLRlMapElement
    'rl-select-menu': HTMLRlSelectMenuElement
    'rl-text-field': HTMLRlTextFieldElement
    'rl-text-log': HTMLRlTextLogElement
  }

  interface ElementTagNameMap {
    'rl-detail-dialog-item': HTMLRlDetailDialogItemElement;
    'rl-detail-dialog': HTMLRlDetailDialogElement;
    'rl-map-editor': HTMLRlMapEditorElement;
    'rl-map': HTMLRlMapElement;
    'rl-select-menu': HTMLRlSelectMenuElement;
    'rl-text-field': HTMLRlTextFieldElement;
    'rl-text-log': HTMLRlTextLogElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
